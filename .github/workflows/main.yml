name: Controller & App CI

on:
  push:
    branches:
      - "main"
    tags:
      - "*/v*"

jobs:
  build-app:
    runs-on: ubuntu-latest
    if: contains(github.ref, 'app/')

    strategy:
      matrix:
        node-version: [14.x, 15.x]
    
    steps:
      - uses: actions/checkout@v2
      - name: Get Tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        
      - name: Set up Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run Angular Build
        run: |
          cd App
          npm run build

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: './App/www/'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 1

  build-controller:
    runs-on: ubuntu-latest
    if: contains(github.ref, 'controller/')

    steps:
    - uses: actions/checkout@v2
    - name: Get Tag
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
        
    - name: Set up Python
      uses: actions/setup-python@v2
      
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
        
    - name: Run PlatformIO
      run: |
        cd Arduino
        PLATFORMIO_BUILD_DIR="./bin"
        pio run
        
    - name: Zip for Release
      run: |
        cd Arduino/bin/
        tar -cvzf controller.tar.gz */firmware.bin

    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        automatic_release_tag: "${{ env.RELEASE_VERSION }}"
        files: |
          LICENSE.txt
          Arduino/CHANGELOG.txt
          Arduino/bin/controller.tar.gz
